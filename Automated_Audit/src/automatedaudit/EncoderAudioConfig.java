/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package automatedaudit;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author csimonson
 */
public class EncoderAudioConfig extends javax.swing.JDialog {

    DefaultTableModel model;
    private A7_Encoder eData;
    private final String[] tableHeader = {"Channel", "Active", "Out PID", "Hold PID", 
        "Compression Type", "Bit Rate", "Dialog Normalization", "Source"}; 
    private final Map<String, String> rateMap = new HashMap<String, String>() {{ 
            put(" 0", "96K"); put(" 1", "112K"); put(" 2", "128K"); 
            put(" 3", "160K"); put(" 4", "192K"); put(" 5", "224K");
            put(" 6", "256K"); put(" 7", "320K"); put(" 8", "384K"); 
            put(" 9", "448K"); put(" 10", "512K"); put(" 11", "576K");
            put(" 12", "640K"); put(" 13", "48K"); put(" 14", "64K"); 
            put(" 16", "80K"); put(" 17", "56K"); put(" 18", "40K");
            put(" 19", "32K");
        }};
    private final Map<String, String> compressionMap = 
            new HashMap<String, String>() {{ put(" 1", "PassThrough AC-3"); 
            put(" 2", "Encode MPEG 1 Layer II"); 
            put(" 4", "Encode Pulse Pro AAC"); 
            put(" 10", "Encode AC-3"); put(" 12", "PassThrough DD+Pro"); 
            put(" 17", "Downsample To Stereo AC-3"); 
            put(" 18", "Downsample To PulsePro AAC"); 
        }};
    private final Map<String, String> sourceMap = new HashMap<String, String>() {{ 
            put(" 2", "SDI Group1 Ch 1/2"); put(" 3", "SDI Group1 Ch 3/4"); 
            put(" 4", "SDI Group2 Ch 5/6"); put(" 5", "SDI Group2 Ch 7/8"); 
            put(" 6", "AES Input 1"); put(" 7", "AES Input 2");
            put(" 48", "SDI Group3 Ch 9/10"); put(" 49", "SDI Group3 Ch 11/12"); 
            put(" 50", "SDI Group4 Ch 13/14"); 
            put(" 51", "SDI Group4 Ch 15/16"); 
        }};
    
    /**
     * Creates new form EncoderAudioConfig
     */
    public EncoderAudioConfig(java.awt.Frame parent) {
        super(parent);
        initComponents();
        audioTable.setRowSelectionAllowed(true);
        model = new DefaultTableModel(0, 0);
        model.setColumnIdentifiers(tableHeader);
        audioTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        audioTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Audio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        audioTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        audioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"No Data", null, "No Data", "No Data", "No Data", "No Data", "No Data", null}
            },
            new String [] {
                "Channel", "Active", "Out PID", "HOLD PID", "Compression Type", "Bit Rate", "Dialog Normalization", "Source"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(audioTable);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(82, 82, 82))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     */
    public void run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncoderAudioConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncoderAudioConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncoderAudioConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncoderAudioConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EncoderAudioConfig dialog = new EncoderAudioConfig(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(false);
            }
        });
    }
    
    /**
     * Method to make display visible
     */
    public void runDisplay(){
        this.setVisible(true);
    }
    
    public void setTableRows(A7_Encoder data){
        
        eData = data;
        
        Map audioMap = eData.getAudioMap();
        
        
        
        /* Loops through all 8 channels of Audio */
        for(int j = 0; j < 8; j++){
            /* Sets string to the current channel */
            String channel = Integer.toString(j+1);
            /* Appends channel to map key */
            String enable = "audioMainTable/audioEnable/1/" + channel;
            String compression = "audioMainTable/audioStandard/1/" + channel;
            String bitRate = "audioMainTable/audioRate/1/" + channel;
            String dialNorm = "audioMainTable/audioDialogNormalization/1/" + channel;
            String source = "audioMainTable/audioGroupId/1/" + channel;
            String hold = "audioMainTable/audioHold/1/" + channel;
            if(audioMap.containsKey(enable)){
                model.addRow(new Object[] {"No Data", "Disabled", "No Data", 
                    "Disabled", "No Data", "No Data", "No Data", "No Data"});
                model.setValueAt(channel, j, 0);
                if(audioMap.get(enable).equals(" 1")){
                    model.setValueAt("enabled", j, 1);
                }
                else model.setValueAt("disabled", j, 1);
            }
            if(audioMap.containsKey(compression) && !audioMap.get(compression).equals("No Data")){
                String comp = compression((String) audioMap.get(compression));
                model.setValueAt(comp, j, 4);
            }
            if(audioMap.containsKey(bitRate) && !audioMap.get(compression).equals("No Data")){
                String rate = bitRate((String) audioMap.get(bitRate));
                model.setValueAt(rate, j, 5);
            }
            if(audioMap.containsKey(dialNorm) && !audioMap.get(dialNorm).equals("No Data")){
                String normalization = "-" + (String) audioMap.get(dialNorm) + "dB";
                model.setValueAt(normalization, j, 6);
            }
            if(audioMap.containsKey(source) && !audioMap.get(source).equals("No Data")){
                String src = source((String) audioMap.get(source));
                model.setValueAt(src, j, 7);
            }
            if(audioMap.containsKey(hold) && !audioMap.get(hold).equals("No Data")){
                if(audioMap.get(hold).equals(" 1")){
                   model.setValueAt("Enabled", j, 3); 
                }
            }
        }    
    }
    
    /**
     * Method to determine the mode of the Audio Compression.
     * @param value The number value of the compression setting
     * @return The compression setting
     */
    private String compression(String value){
        return compressionMap.get(value);
    }
    
    /**
     * Method to determine the source of the Audio.
     * @param value The number value of the source setting
     * @return The source setting
     */
    private String source(String value){
        return sourceMap.get(value);
    }
    
    /**
     * Method to determine the BitRate of the Audio.
     * @param value The number value of the BitRate setting
     * @return The BitRate setting
     */
    private String bitRate(String value){
        return rateMap.get(value);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable audioTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
